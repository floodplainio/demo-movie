/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.floodplain.movie

import io.quarkus.runtime.Startup
import io.smallrye.mutiny.coroutines.awaitSuspending
import io.vertx.mutiny.pgclient.PgPool
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.util.concurrent.atomic.AtomicLong
import javax.annotation.PostConstruct
import javax.inject.Inject
import javax.inject.Singleton
import kotlin.random.Random

@Singleton @Startup
open class App {

	@Inject
	lateinit var client: PgPool
	private val totalAdded = AtomicLong(0)

	@PostConstruct
	fun initialize() {
		GlobalScope.launch {
			while (true) {
				try {
					insertRandomPayment()
					delay(1000)
				} catch (e: Exception) {
					e.printStackTrace()
				}
			}
		}
	}

	private suspend fun insertRandomPayment() {
		totalAdded.incrementAndGet()
		val amount = Math.random()*100
		val customer = randomCustomer()
		val staff = randomStaff()
		val rental = randomRental()
		val insertedId = insertPayment(customer, staff, rental, amount)
		println("Inserted id: $insertedId customer: $customer staff: $staff rental $rental")
	}

	private fun randomCustomer(): Short {
		return Random.nextInt(1, 600).toShort()
	}

	private suspend fun randomStaff(): Short {
		return client.query("SELECT * from staff order by random() limit 1").execute().awaitSuspending().first().getShort("staff_id")
	}

	private suspend fun randomRental(): Int {
		return client.query("SELECT * from rental order by random() limit 1").execute().awaitSuspending().first().getInteger("rental_id")
	}
	private suspend fun insertPayment(customerId: Short, staffId: Short, rentalId: Int, amount: Double): Int {
		val payment = io.vertx.mutiny.sqlclient.Tuple.of(customerId,staffId,rentalId,amount)
		return client.preparedQuery("INSERT INTO payment (customer_id,staff_id,rental_id,amount,payment_date) VALUES ($1,$2,$3,$4,current_timestamp) RETURNING payment_id").execute(payment).awaitSuspending().first().getInteger("payment_id")
	}
}




